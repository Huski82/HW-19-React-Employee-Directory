{"version":3,"sources":["User/User.js","Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["user","props","className","src","image","name","phone","href","email","dob","header","App","state","users","id","updateSearch","event","setState","search","target","value","substr","filteredUsers","this","filter","indexOf","type","placeholder","onChange","bind","map","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oUA2BeA,EAxBF,SAACC,GACV,OACI,qBAAKC,UAAU,YAAf,SACI,sBAAKA,UAAU,WAAf,UACI,qBAAKA,UAAU,cAAf,SACA,qBAAKC,IAAKF,EAAMG,UAEhB,qBAAKF,UAAU,cAAf,SACI,4BAAID,EAAMI,SAEd,qBAAKH,UAAU,cAAf,SACI,4BAAID,EAAMK,UAEd,qBAAKJ,UAAU,cAAf,SACI,mBAAGK,KAAMN,EAAMO,MAAf,SAAuBP,EAAMO,UAEjC,qBAAKN,UAAU,cAAf,SACI,4BAAID,EAAMQ,cCHfC,G,MAdA,WACX,OACI,qBAAKR,UAAU,YAAf,SACI,sBAAKA,UAAU,gBAAf,UACI,qBAAKA,UAAU,gBAAf,mBACA,qBAAKA,UAAU,gBAAf,kBACA,qBAAKA,UAAU,gBAAf,mBACA,qBAAKA,UAAU,gBAAf,mBACA,qBAAKA,UAAU,gBAAf,wBCiEDS,E,4MAtEbC,MAAQ,CACNC,MAAO,CACL,CACEC,GAAI,EACJV,MAAO,iBACPC,KAAM,aACNC,MAAO,iBACPE,MAAO,mBACPC,IAAK,cAEP,CACEK,GAAI,EACJV,MAAO,iBACPC,KAAM,iBACNC,MAAO,iBACPE,MAAO,oBACPC,IAAK,cAEP,CACEK,GAAI,EACJV,MAAO,iBACPC,KAAM,eACNC,MAAO,iBACPE,MAAO,kBACPC,IAAK,gB,EAKXM,aAAe,SAACC,GACd,EAAKC,SAAS,CAAEC,OAAQF,EAAMG,OAAOC,MAAMC,OAAO,EAAG,O,4CAGvD,WAAU,IAAD,OACHC,EAAgBC,KAAKX,MAAMC,MAAMW,QACnC,SAACX,GACC,OAAkD,IAA3CA,EAAMR,KAAKoB,QAAQ,EAAKb,MAAMM,WAIzC,OACE,sBAAKhB,UAAU,MAAf,UACE,sBAAKA,UAAU,MAAf,UACE,mBAAGA,UAAU,WAAb,gCACA,mBAAGA,UAAU,kBAAb,mDAGF,uBACEwB,KAAK,OACLC,YAAY,cACZP,MAAOG,KAAKX,MAAMM,OAClBU,SAAUL,KAAKR,aAAac,KAAKN,QAEnC,cAAC,EAAD,IACCD,EAAcQ,KAAI,SAAA9B,GACjB,OACE,cAAC,EAAD,CACEI,MAAOJ,EAAKI,MACZC,KAAML,EAAKK,KACXC,MAAON,EAAKM,MACZE,MAAOR,EAAKQ,MACZC,IAAKT,EAAKS,KACLT,EAAKc,c,GA/DNiB,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5b1c0db9.chunk.js","sourcesContent":["import React from 'react';\nimport './User.css';\n\nconst user = (props) => {\n    return (\n        <div className='container'>\n            <div className='row User'>\n                <div className='col-sm Info'>\n                <img src={props.image}></img>\n                </div>\n                <div className='col-sm Info'>\n                    <p>{props.name}</p>\n                </div>\n                <div className='col-sm Info'>\n                    <p>{props.phone}</p>\n                </div>\n                <div className='col-sm Info'>\n                    <a href={props.email}>{props.email}</a>\n                </div>\n                <div className='col-sm Info'>\n                    <p>{props.dob}</p>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default user;","import React from 'react';\nimport './Header.css';\n\nconst header = () => {\n    return (\n        <div className='container'>\n            <div className='row HeaderRow'>\n                <div className='col-sm Header'>Image</div>\n                <div className='col-sm Header'>Name</div>\n                <div className='col-sm Header'>Phone</div>\n                <div className='col-sm Header'>Email</div>\n                <div className='col-sm Header'>DOB</div>\n            </div>\n        </div>\n    );\n};\n\nexport default header;","import React, { Component } from 'react';\nimport './App.css';\nimport User from './User/User';\nimport Header from './Header/Header';\n\nclass App extends Component {\n  state = {\n    users: [\n      {\n        id: 1,\n        image: \"./img/girl.png\",\n        name: \"Emma Huski\",\n        phone: \"(510) 123-4567\",\n        email: \"ehuski@gmail.com\",\n        dob: \"09-13-2014\"\n      },\n      {\n        id: 2,\n        image: \"./img/guy1.png\",\n        name: \"Yasamin Nawabi\",\n        phone: \"(415) 123-1212\",\n        email: \"ynawabi@gmail.com\",\n        dob: \"02-06-1981\"\n      },\n      {\n        id: 3,\n        image: \"./img/guy2.png\",\n        name: \"Dirk Diggler\",\n        phone: \"(619) 123-6869\",\n        email: \"bdirk@gmail.com\",\n        dob: \"12-12-1975\"\n      }\n    ]\n  }\n\n  updateSearch = (event) => {\n    this.setState({ search: event.target.value.substr(0, 30) });\n  }\n\n  render() {\n    let filteredUsers = this.state.users.filter(\n      (users) => {\n        return users.name.indexOf(this.state.search) !== -1;\n      }\n    );\n\n    return (\n      <div className=\"App\">\n        <nav className=\"Nav\">\n          <p className=\"NavTitle\">Employee Directory</p>\n          <p className=\"NavInstructions\">Use search bar to locate employee.</p>\n        </nav>\n\n        <input\n          type='text'\n          placeholder='Search name'\n          value={this.state.search}\n          onChange={this.updateSearch.bind(this)} />\n\n        <Header />\n        {filteredUsers.map(user => {\n          return (\n            <User\n              image={user.image}\n              name={user.name}\n              phone={user.phone}\n              email={user.email}\n              dob={user.dob}\n              key={user.id} />\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}